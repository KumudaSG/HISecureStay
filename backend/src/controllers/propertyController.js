/**
 * Property Controller
 * Handles business logic for property-related operations
 */

const blockchainService = require('../services/blockchainService');
const { formatResponse } = require('../utils/helpers');

// Mock database for properties (in a real app, this would be a database)
const properties = [
  {
    id: 1,
    name: 'Beach House',
    description: 'Beautiful beach house with ocean view',
    price_per_day: 1000000000, // 1 SOL in lamports
    min_duration: 1,
    max_duration: 30,
    smart_lock_id: 'LOCK123',
    is_available: true,
    owner: 'HN7cABqLq46Es1jh92dQQisAq662SmxELLLsHHe5tHgP',
    location: {
      address: '123 Ocean Drive',
      city: 'Miami',
      state: 'FL',
      zip: '33139',
      country: 'USA',
      coordinates: {
        latitude: 25.7617,
        longitude: -80.1918
      }
    },
    images: [
      'https://images.unsplash.com/photo-1499793983690-e29da59ef1c2',
      'https://images.unsplash.com/photo-1518563259479-d003c05a6507'
    ],
    amenities: ['Wi-Fi', 'Kitchen', 'Pool', 'Beachfront']
  },
  {
    id: 2,
    name: 'Mountain Cabin',
    description: 'Cozy cabin in the mountains with stunning views',
    price_per_day: 500000000, // 0.5 SOL in lamports
    min_duration: 2,
    max_duration: 14,
    smart_lock_id: 'LOCK456',
    is_available: true,
    owner: 'HN7cABqLq46Es1jh92dQQisAq662SmxELLLsHHe5tHgP',
    location: {
      address: '456 Mountain Road',
      city: 'Aspen',
      state: 'CO',
      zip: '81611',
      country: 'USA',
      coordinates: {
        latitude: 39.1911,
        longitude: -106.8175
      }
    },
    images: [
      'https://images.unsplash.com/photo-1449158743715-0a90ebb6d2d8',
      'https://images.unsplash.com/photo-1464822759023-fed622ff2c3b'
    ],
    amenities: ['Wi-Fi', 'Fireplace', 'Hot Tub', 'Mountain Views']
  }
];

// Get all properties
const getAllProperties = async (req, res) => {
  try {
    // Format properties for frontend
    const formattedProperties = properties.map(formatPropertyForFrontend);
    
    res.json(formatResponse(true, { properties: formattedProperties }));
  } catch (error) {
    console.error('Error fetching properties:', error);
    res.status(500).json(formatResponse(false, null, 'Failed to fetch properties'));
  }
};

// Get property by ID
const getPropertyById = async (req, res) => {
  try {
    const propertyId = parseInt(req.params.id);
    
    // Find property by ID
    const property = properties.find(p => p.id === propertyId);
    
    if (!property) {
      return res.status(404).json(formatResponse(false, null, 'Property not found'));
    }
    
    // Format property for frontend
    const formattedProperty = formatPropertyForFrontend(property);
    
    res.json(formatResponse(true, { property: formattedProperty }));
  } catch (error) {
    console.error('Error fetching property:', error);
    res.status(500).json(formatResponse(false, null, 'Failed to fetch property'));
  }
};

// Get properties by owner
const getPropertiesByOwner = async (req, res) => {
  try {
    const ownerPublicKey = req.params.publicKey;
    
    // Find properties by owner
    const ownerProperties = properties.filter(p => p.owner === ownerPublicKey);
    
    // Format properties for frontend
    const formattedProperties = ownerProperties.map(formatPropertyForFrontend);
    
    res.json(formatResponse(true, { properties: formattedProperties }));
  } catch (error) {
    console.error('Error fetching owner properties:', error);
    res.status(500).json(formatResponse(false, null, 'Failed to fetch owner properties'));
  }
};

// Create a new property
const createProperty = async (req, res) => {
  try {
    const {
      name,
      description,
      price_per_day,
      min_duration,
      max_duration,
      smart_lock_id,
      owner,
      location,
      images,
      amenities
    } = req.body;
    
    // Validate required fields
    if (!name || !price_per_day || !owner || !smart_lock_id) {
      return res.status(400).json(formatResponse(false, null, 'Missing required fields'));
    }
    
    // In a real implementation, we would:
    // 1. Store the property details in a database
    // 2. Register the property on the blockchain
    
    // Register property on blockchain
    const result = await blockchainService.listProperty(owner, {
      name,
      description,
      price_per_day,
      min_duration,
      max_duration,
      smart_lock_id
    });
    
    // Create new property object
    const newProperty = {
      id: properties.length + 1, // In a real app, this would be generated by the database
      name,
      description,
      price_per_day,
      min_duration,
      max_duration,
      smart_lock_id,
      is_available: true,
      owner,
      location,
      images,
      amenities,
      blockchain_tx: result.transactionSignature
    };
    
    // Add to our mock database
    properties.push(newProperty);
    
    // Format property for frontend
    const formattedProperty = formatPropertyForFrontend(newProperty);
    
    res.status(201).json(formatResponse(true, { property: formattedProperty }));
  } catch (error) {
    console.error('Error creating property:', error);
    res.status(500).json(formatResponse(false, null, 'Failed to create property'));
  }
};

// Helper function to format property data for frontend
const formatPropertyForFrontend = (property) => {
  return {
    id: property.id.toString(),
    name: property.name,
    description: property.description,
    price_per_day: property.price_per_day,
    location: {
      address: property.location.address,
      city: property.location.city,
      state: property.location.state,
      zip: property.location.zip,
      country: property.location.country,
    },
    images: property.images,
    status: property.is_available ? 'available' : (property.current_tenant ? 'rented' : 'booked'),
    min_duration: property.min_duration,
    max_duration: property.max_duration,
    smart_lock_id: property.smart_lock_id,
    is_available: property.is_available,
    owner: property.owner,
    amenities: property.amenities,
    rental_start: property.rental_start,
    rental_end: property.rental_end,
  };
};

module.exports = {
  getAllProperties,
  getPropertyById,
  getPropertiesByOwner,
  createProperty
};
